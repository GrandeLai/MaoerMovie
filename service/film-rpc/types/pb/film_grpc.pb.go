// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: film.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilmRpcClient is the client API for FilmRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilmRpcClient interface {
	GetFilm(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*GetFilmResponse, error)
	GetFilmDetail(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*GetFilmDetailResponse, error)
	CreateFilm(ctx context.Context, in *FilmCreateRequest, opts ...grpc.CallOption) (*FilmCreateResponse, error)
	UpdateFilm(ctx context.Context, in *FilmUpdateRequest, opts ...grpc.CallOption) (*FilmResponse, error)
	DeleteFilm(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*FilmResponse, error)
	AdminFilmList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*AdminFilmListResponse, error)
	UpdateFilmInfo(ctx context.Context, in *FilmInfoUpdateRequest, opts ...grpc.CallOption) (*FilmResponse, error)
	GetActorList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ActorListResponse, error)
	SearchFilm(ctx context.Context, in *SearchFilmRequest, opts ...grpc.CallOption) (*SearchFilmResponse, error)
	GetAllCategory(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GetCategoryListResponse, error)
	GetCinemaFilm(ctx context.Context, in *CinemaFilmRequest, opts ...grpc.CallOption) (*CinemaFilmResponse, error)
}

type filmRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFilmRpcClient(cc grpc.ClientConnInterface) FilmRpcClient {
	return &filmRpcClient{cc}
}

func (c *filmRpcClient) GetFilm(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*GetFilmResponse, error) {
	out := new(GetFilmResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/GetFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) GetFilmDetail(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*GetFilmDetailResponse, error) {
	out := new(GetFilmDetailResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/GetFilmDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) CreateFilm(ctx context.Context, in *FilmCreateRequest, opts ...grpc.CallOption) (*FilmCreateResponse, error) {
	out := new(FilmCreateResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/CreateFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) UpdateFilm(ctx context.Context, in *FilmUpdateRequest, opts ...grpc.CallOption) (*FilmResponse, error) {
	out := new(FilmResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/UpdateFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) DeleteFilm(ctx context.Context, in *FilmRequest, opts ...grpc.CallOption) (*FilmResponse, error) {
	out := new(FilmResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/DeleteFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) AdminFilmList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*AdminFilmListResponse, error) {
	out := new(AdminFilmListResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/AdminFilmList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) UpdateFilmInfo(ctx context.Context, in *FilmInfoUpdateRequest, opts ...grpc.CallOption) (*FilmResponse, error) {
	out := new(FilmResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/UpdateFilmInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) GetActorList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ActorListResponse, error) {
	out := new(ActorListResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/GetActorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) SearchFilm(ctx context.Context, in *SearchFilmRequest, opts ...grpc.CallOption) (*SearchFilmResponse, error) {
	out := new(SearchFilmResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/SearchFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) GetAllCategory(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GetCategoryListResponse, error) {
	out := new(GetCategoryListResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/GetAllCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmRpcClient) GetCinemaFilm(ctx context.Context, in *CinemaFilmRequest, opts ...grpc.CallOption) (*CinemaFilmResponse, error) {
	out := new(CinemaFilmResponse)
	err := c.cc.Invoke(ctx, "/film.filmRpc/GetCinemaFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilmRpcServer is the server API for FilmRpc service.
// All implementations must embed UnimplementedFilmRpcServer
// for forward compatibility
type FilmRpcServer interface {
	GetFilm(context.Context, *FilmRequest) (*GetFilmResponse, error)
	GetFilmDetail(context.Context, *FilmRequest) (*GetFilmDetailResponse, error)
	CreateFilm(context.Context, *FilmCreateRequest) (*FilmCreateResponse, error)
	UpdateFilm(context.Context, *FilmUpdateRequest) (*FilmResponse, error)
	DeleteFilm(context.Context, *FilmRequest) (*FilmResponse, error)
	AdminFilmList(context.Context, *ListRequest) (*AdminFilmListResponse, error)
	UpdateFilmInfo(context.Context, *FilmInfoUpdateRequest) (*FilmResponse, error)
	GetActorList(context.Context, *ListRequest) (*ActorListResponse, error)
	SearchFilm(context.Context, *SearchFilmRequest) (*SearchFilmResponse, error)
	GetAllCategory(context.Context, *CommonRequest) (*GetCategoryListResponse, error)
	GetCinemaFilm(context.Context, *CinemaFilmRequest) (*CinemaFilmResponse, error)
	mustEmbedUnimplementedFilmRpcServer()
}

// UnimplementedFilmRpcServer must be embedded to have forward compatible implementations.
type UnimplementedFilmRpcServer struct {
}

func (UnimplementedFilmRpcServer) GetFilm(context.Context, *FilmRequest) (*GetFilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilm not implemented")
}
func (UnimplementedFilmRpcServer) GetFilmDetail(context.Context, *FilmRequest) (*GetFilmDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilmDetail not implemented")
}
func (UnimplementedFilmRpcServer) CreateFilm(context.Context, *FilmCreateRequest) (*FilmCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilm not implemented")
}
func (UnimplementedFilmRpcServer) UpdateFilm(context.Context, *FilmUpdateRequest) (*FilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilm not implemented")
}
func (UnimplementedFilmRpcServer) DeleteFilm(context.Context, *FilmRequest) (*FilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilm not implemented")
}
func (UnimplementedFilmRpcServer) AdminFilmList(context.Context, *ListRequest) (*AdminFilmListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminFilmList not implemented")
}
func (UnimplementedFilmRpcServer) UpdateFilmInfo(context.Context, *FilmInfoUpdateRequest) (*FilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilmInfo not implemented")
}
func (UnimplementedFilmRpcServer) GetActorList(context.Context, *ListRequest) (*ActorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorList not implemented")
}
func (UnimplementedFilmRpcServer) SearchFilm(context.Context, *SearchFilmRequest) (*SearchFilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFilm not implemented")
}
func (UnimplementedFilmRpcServer) GetAllCategory(context.Context, *CommonRequest) (*GetCategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategory not implemented")
}
func (UnimplementedFilmRpcServer) GetCinemaFilm(context.Context, *CinemaFilmRequest) (*CinemaFilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCinemaFilm not implemented")
}
func (UnimplementedFilmRpcServer) mustEmbedUnimplementedFilmRpcServer() {}

// UnsafeFilmRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilmRpcServer will
// result in compilation errors.
type UnsafeFilmRpcServer interface {
	mustEmbedUnimplementedFilmRpcServer()
}

func RegisterFilmRpcServer(s grpc.ServiceRegistrar, srv FilmRpcServer) {
	s.RegisterService(&FilmRpc_ServiceDesc, srv)
}

func _FilmRpc_GetFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).GetFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/GetFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).GetFilm(ctx, req.(*FilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_GetFilmDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).GetFilmDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/GetFilmDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).GetFilmDetail(ctx, req.(*FilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_CreateFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).CreateFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/CreateFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).CreateFilm(ctx, req.(*FilmCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_UpdateFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).UpdateFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/UpdateFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).UpdateFilm(ctx, req.(*FilmUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_DeleteFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).DeleteFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/DeleteFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).DeleteFilm(ctx, req.(*FilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_AdminFilmList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).AdminFilmList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/AdminFilmList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).AdminFilmList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_UpdateFilmInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmInfoUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).UpdateFilmInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/UpdateFilmInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).UpdateFilmInfo(ctx, req.(*FilmInfoUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_GetActorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).GetActorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/GetActorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).GetActorList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_SearchFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).SearchFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/SearchFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).SearchFilm(ctx, req.(*SearchFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_GetAllCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).GetAllCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/GetAllCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).GetAllCategory(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilmRpc_GetCinemaFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CinemaFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmRpcServer).GetCinemaFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.filmRpc/GetCinemaFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmRpcServer).GetCinemaFilm(ctx, req.(*CinemaFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilmRpc_ServiceDesc is the grpc.ServiceDesc for FilmRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilmRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "film.filmRpc",
	HandlerType: (*FilmRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilm",
			Handler:    _FilmRpc_GetFilm_Handler,
		},
		{
			MethodName: "GetFilmDetail",
			Handler:    _FilmRpc_GetFilmDetail_Handler,
		},
		{
			MethodName: "CreateFilm",
			Handler:    _FilmRpc_CreateFilm_Handler,
		},
		{
			MethodName: "UpdateFilm",
			Handler:    _FilmRpc_UpdateFilm_Handler,
		},
		{
			MethodName: "DeleteFilm",
			Handler:    _FilmRpc_DeleteFilm_Handler,
		},
		{
			MethodName: "AdminFilmList",
			Handler:    _FilmRpc_AdminFilmList_Handler,
		},
		{
			MethodName: "UpdateFilmInfo",
			Handler:    _FilmRpc_UpdateFilmInfo_Handler,
		},
		{
			MethodName: "GetActorList",
			Handler:    _FilmRpc_GetActorList_Handler,
		},
		{
			MethodName: "SearchFilm",
			Handler:    _FilmRpc_SearchFilm_Handler,
		},
		{
			MethodName: "GetAllCategory",
			Handler:    _FilmRpc_GetAllCategory_Handler,
		},
		{
			MethodName: "GetCinemaFilm",
			Handler:    _FilmRpc_GetCinemaFilm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "film.proto",
}

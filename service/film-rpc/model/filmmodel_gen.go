// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	filmFieldNames          = builder.RawFieldNames(&Film{})
	filmRows                = strings.Join(filmFieldNames, ",")
	filmRowsExpectAutoSet   = strings.Join(stringx.Remove(filmFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	filmRowsWithPlaceHolder = strings.Join(stringx.Remove(filmFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheFilmIdPrefix = "cache:film:id:"
)

type (
	filmModel interface {
		Insert(ctx context.Context, data *Film) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Film, error)
		Update(ctx context.Context, data *Film) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFilmModel struct {
		sqlc.CachedConn
		table string
	}

	Film struct {
		Id         int64        `db:"id"`           // 主键编号
		FilmName   string       `db:"film_name"`    // 影片名称
		FilmEnName string       `db:"film_en_name"` // 影片英文名称
		FilmType   int64        `db:"film_type"`    // 片源类型: 0-2D,1-3D,2-3DIMAX,4-无
		FilmCover  string       `db:"film_cover"`   // 影片主图地址
		FilmLength int64        `db:"film_length"`  // 播放时长，以分钟为单位，不足取整
		CategoryId int64        `db:"category_id"`  // 影片分类，参照分类表,多个分类以#分割
		FilmArea   string       `db:"film_area"`    // 上映区域
		FilmTime   sql.NullTime `db:"film_time"`    // 影片上映时间
		DirectorId int64        `db:"director_id"`  // 导演编号
		Biography  string       `db:"biography"`    // 影片介绍
		CreateTime time.Time    `db:"create_time"`
		UpdateTime time.Time    `db:"update_time"`
	}
)

func newFilmModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFilmModel {
	return &defaultFilmModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`film`",
	}
}

func (m *defaultFilmModel) Delete(ctx context.Context, id int64) error {
	filmIdKey := fmt.Sprintf("%s%v", cacheFilmIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, filmIdKey)
	return err
}

func (m *defaultFilmModel) FindOne(ctx context.Context, id int64) (*Film, error) {
	filmIdKey := fmt.Sprintf("%s%v", cacheFilmIdPrefix, id)
	var resp Film
	err := m.QueryRowCtx(ctx, &resp, filmIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filmRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilmModel) Insert(ctx context.Context, data *Film) (sql.Result, error) {
	filmIdKey := fmt.Sprintf("%s%v", cacheFilmIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, filmRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FilmName, data.FilmEnName, data.FilmType, data.FilmCover, data.FilmLength, data.CategoryId, data.FilmArea, data.FilmTime, data.DirectorId, data.Biography)
	}, filmIdKey)
	return ret, err
}

func (m *defaultFilmModel) Update(ctx context.Context, data *Film) error {
	filmIdKey := fmt.Sprintf("%s%v", cacheFilmIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, filmRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FilmName, data.FilmEnName, data.FilmType, data.FilmCover, data.FilmLength, data.CategoryId, data.FilmArea, data.FilmTime, data.DirectorId, data.Biography, data.Id)
	}, filmIdKey)
	return err
}

func (m *defaultFilmModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFilmIdPrefix, primary)
}

func (m *defaultFilmModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filmRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFilmModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	filmInfoFieldNames          = builder.RawFieldNames(&FilmInfo{})
	filmInfoRows                = strings.Join(filmInfoFieldNames, ",")
	filmInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(filmInfoFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	filmInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(filmInfoFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheFilmInfoIdPrefix     = "cache:filmInfo:id:"
	cacheFilmInfoFilmIdPrefix = "cache:filmInfo:filmId:"
)

type (
	filmInfoModel interface {
		Insert(ctx context.Context, data *FilmInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FilmInfo, error)
		Update(ctx context.Context, data *FilmInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFilmInfoModel struct {
		sqlc.CachedConn
		table string
	}

	FilmInfo struct {
		Id             int64  `db:"id"`              // 主键编号
		FilmId         int64  `db:"film_id"`         // 电影编号
		FilmPreSaleNum int64  `db:"film_preSaleNum"` // 影片预售数量
		FilmBoxOffice  int64  `db:"film_box_office"` // 影片票房：每日更新，以万为单位
		FilmImgs       string `db:"film_imgs"`       // 影片图片集地址,多个图片以逗号分隔
	}
)

func newFilmInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFilmInfoModel {
	return &defaultFilmInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`film_info`",
	}
}

func (m *defaultFilmInfoModel) Delete(ctx context.Context, id int64) error {
	filmInfoIdKey := fmt.Sprintf("%s%v", cacheFilmInfoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, filmInfoIdKey)
	return err
}

func (m *defaultFilmInfoModel) FindOne(ctx context.Context, id int64) (*FilmInfo, error) {
	filmInfoIdKey := fmt.Sprintf("%s%v", cacheFilmInfoIdPrefix, id)
	var resp FilmInfo
	err := m.QueryRowCtx(ctx, &resp, filmInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filmInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilmInfoModel) Insert(ctx context.Context, data *FilmInfo) (sql.Result, error) {
	filmInfoIdKey := fmt.Sprintf("%s%v", cacheFilmInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, filmInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FilmId, data.FilmPreSaleNum, data.FilmBoxOffice, data.FilmImgs)
	}, filmInfoIdKey)
	return ret, err
}

func (m *defaultFilmInfoModel) Update(ctx context.Context, data *FilmInfo) error {
	filmInfoIdKey := fmt.Sprintf("%s%v", cacheFilmInfoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, filmInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FilmId, data.FilmPreSaleNum, data.FilmBoxOffice, data.FilmImgs, data.Id)
	}, filmInfoIdKey)
	return err
}

func (m *defaultFilmInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFilmInfoIdPrefix, primary)
}

func (m *defaultFilmInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filmInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFilmInfoModel) tableName() string {
	return m.table
}

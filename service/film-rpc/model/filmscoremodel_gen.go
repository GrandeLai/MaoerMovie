// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	filmScoreFieldNames          = builder.RawFieldNames(&FilmScore{})
	filmScoreRows                = strings.Join(filmScoreFieldNames, ",")
	filmScoreRowsExpectAutoSet   = strings.Join(stringx.Remove(filmScoreFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	filmScoreRowsWithPlaceHolder = strings.Join(stringx.Remove(filmScoreFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheFilmScoreIdPrefix     = "cache:filmScore:id:"
	cacheFilmScoreFilmIdPrefix = "cache:filmScore:filmId:"
)

type (
	filmScoreModel interface {
		Insert(ctx context.Context, data *FilmScore) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FilmScore, error)
		Update(ctx context.Context, data *FilmScore) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFilmScoreModel struct {
		sqlc.CachedConn
		table string
	}

	FilmScore struct {
		Id           int64   `db:"id"`             // 主键编号
		FilmId       int64   `db:"film_id"`        // 电影编号
		FilmScore    float64 `db:"film_score"`     // 影片评分
		FilmScoreNum int64   `db:"film_score_num"` // 评分人数,以万为单位
	}
)

func newFilmScoreModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFilmScoreModel {
	return &defaultFilmScoreModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`film_score`",
	}
}

func (m *defaultFilmScoreModel) Delete(ctx context.Context, id int64) error {
	filmScoreIdKey := fmt.Sprintf("%s%v", cacheFilmScoreIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, filmScoreIdKey)
	return err
}

func (m *defaultFilmScoreModel) FindOne(ctx context.Context, id int64) (*FilmScore, error) {
	filmScoreIdKey := fmt.Sprintf("%s%v", cacheFilmScoreIdPrefix, id)
	var resp FilmScore
	err := m.QueryRowCtx(ctx, &resp, filmScoreIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filmScoreRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilmScoreModel) Insert(ctx context.Context, data *FilmScore) (sql.Result, error) {
	filmScoreIdKey := fmt.Sprintf("%s%v", cacheFilmScoreIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, filmScoreRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FilmId, data.FilmScore, data.FilmScoreNum)
	}, filmScoreIdKey)
	return ret, err
}

func (m *defaultFilmScoreModel) Update(ctx context.Context, data *FilmScore) error {
	filmScoreIdKey := fmt.Sprintf("%s%v", cacheFilmScoreIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, filmScoreRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FilmId, data.FilmScore, data.FilmScoreNum, data.Id)
	}, filmScoreIdKey)
	return err
}

func (m *defaultFilmScoreModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFilmScoreIdPrefix, primary)
}

func (m *defaultFilmScoreModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filmScoreRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFilmScoreModel) tableName() string {
	return m.table
}

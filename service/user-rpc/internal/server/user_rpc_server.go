// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"MaoerMovie/service/user-rpc/internal/logic"
	"MaoerMovie/service/user-rpc/internal/svc"
	"MaoerMovie/service/user-rpc/types/user"
)

type UserRpcServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserRpcServer
}

func NewUserRpcServer(svcCtx *svc.ServiceContext) *UserRpcServer {
	return &UserRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRpcServer) Login(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserRpcServer) Register(ctx context.Context, in *user.RegisterRequest) (*user.RegisterResponse, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserRpcServer) SendEmailCode(ctx context.Context, in *user.SendEmailCodeRequest) (*user.SearchUserResponse, error) {
	l := logic.NewSendEmailCodeLogic(ctx, s.svcCtx)
	return l.SendEmailCode(in)
}

func (s *UserRpcServer) RefreshAuth(ctx context.Context, in *user.RefreshAuthRequest) (*user.RefreshAuthResponse, error) {
	l := logic.NewRefreshAuthLogic(ctx, s.svcCtx)
	return l.RefreshAuth(in)
}

func (s *UserRpcServer) UpdatePassword(ctx context.Context, in *user.UpdatePasswordRequest) (*user.UpdatePasswordResponse, error) {
	l := logic.NewUpdatePasswordLogic(ctx, s.svcCtx)
	return l.UpdatePassword(in)
}

func (s *UserRpcServer) UpdateUserInfo(ctx context.Context, in *user.UpdateUserInfoRequest) (*user.UpdateUserInfoResponse, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

func (s *UserRpcServer) GetUserInfo(ctx context.Context, in *user.GetUserInfoRequest) (*user.GetUserInfoResponse, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserRpcServer) SearchUser(ctx context.Context, in *user.SearchUserRequest) (*user.SearchUserResponse, error) {
	l := logic.NewSearchUserLogic(ctx, s.svcCtx)
	return l.SearchUser(in)
}

func (s *UserRpcServer) GetUserPreview(ctx context.Context, in *user.GetUserInfoRequest) (*user.UserPreview, error) {
	l := logic.NewGetUserPreviewLogic(ctx, s.svcCtx)
	return l.GetUserPreview(in)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderRpcClient is the client API for OrderRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderRpcClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error)
	GetOrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetOrderListResponse, error)
	GetPaidOrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetPaidOrderListResponse, error)
	GetSoldSeats(ctx context.Context, in *GetSoldSeatsRequest, opts ...grpc.CallOption) (*GetSoldSeatsResponse, error)
	SetOrderPaid(ctx context.Context, in *SetOrderPaidRequest, opts ...grpc.CallOption) (*SetOrderPaidResponse, error)
	SetOrderPaidRollback(ctx context.Context, in *SetOrderPaidRequest, opts ...grpc.CallOption) (*SetOrderPaidResponse, error)
	CreateOrderRollback(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderRequest, error)
}

type orderRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderRpcClient(cc grpc.ClientConnInterface) OrderRpcClient {
	return &orderRpcClient{cc}
}

func (c *orderRpcClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/order.orderRpc/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRpcClient) GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error) {
	out := new(GetOrderDetailResponse)
	err := c.cc.Invoke(ctx, "/order.orderRpc/GetOrderDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRpcClient) GetOrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetOrderListResponse, error) {
	out := new(GetOrderListResponse)
	err := c.cc.Invoke(ctx, "/order.orderRpc/GetOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRpcClient) GetPaidOrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetPaidOrderListResponse, error) {
	out := new(GetPaidOrderListResponse)
	err := c.cc.Invoke(ctx, "/order.orderRpc/GetPaidOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRpcClient) GetSoldSeats(ctx context.Context, in *GetSoldSeatsRequest, opts ...grpc.CallOption) (*GetSoldSeatsResponse, error) {
	out := new(GetSoldSeatsResponse)
	err := c.cc.Invoke(ctx, "/order.orderRpc/GetSoldSeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRpcClient) SetOrderPaid(ctx context.Context, in *SetOrderPaidRequest, opts ...grpc.CallOption) (*SetOrderPaidResponse, error) {
	out := new(SetOrderPaidResponse)
	err := c.cc.Invoke(ctx, "/order.orderRpc/SetOrderPaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRpcClient) SetOrderPaidRollback(ctx context.Context, in *SetOrderPaidRequest, opts ...grpc.CallOption) (*SetOrderPaidResponse, error) {
	out := new(SetOrderPaidResponse)
	err := c.cc.Invoke(ctx, "/order.orderRpc/SetOrderPaidRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRpcClient) CreateOrderRollback(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderRequest, error) {
	out := new(CreateOrderRequest)
	err := c.cc.Invoke(ctx, "/order.orderRpc/CreateOrderRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderRpcServer is the server API for OrderRpc service.
// All implementations must embed UnimplementedOrderRpcServer
// for forward compatibility
type OrderRpcServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrderDetail(context.Context, *GetOrderDetailRequest) (*GetOrderDetailResponse, error)
	GetOrderList(context.Context, *GetOrderListRequest) (*GetOrderListResponse, error)
	GetPaidOrderList(context.Context, *GetOrderListRequest) (*GetPaidOrderListResponse, error)
	GetSoldSeats(context.Context, *GetSoldSeatsRequest) (*GetSoldSeatsResponse, error)
	SetOrderPaid(context.Context, *SetOrderPaidRequest) (*SetOrderPaidResponse, error)
	SetOrderPaidRollback(context.Context, *SetOrderPaidRequest) (*SetOrderPaidResponse, error)
	CreateOrderRollback(context.Context, *CreateOrderRequest) (*CreateOrderRequest, error)
	mustEmbedUnimplementedOrderRpcServer()
}

// UnimplementedOrderRpcServer must be embedded to have forward compatible implementations.
type UnimplementedOrderRpcServer struct {
}

func (UnimplementedOrderRpcServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderRpcServer) GetOrderDetail(context.Context, *GetOrderDetailRequest) (*GetOrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderDetail not implemented")
}
func (UnimplementedOrderRpcServer) GetOrderList(context.Context, *GetOrderListRequest) (*GetOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedOrderRpcServer) GetPaidOrderList(context.Context, *GetOrderListRequest) (*GetPaidOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaidOrderList not implemented")
}
func (UnimplementedOrderRpcServer) GetSoldSeats(context.Context, *GetSoldSeatsRequest) (*GetSoldSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldSeats not implemented")
}
func (UnimplementedOrderRpcServer) SetOrderPaid(context.Context, *SetOrderPaidRequest) (*SetOrderPaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderPaid not implemented")
}
func (UnimplementedOrderRpcServer) SetOrderPaidRollback(context.Context, *SetOrderPaidRequest) (*SetOrderPaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderPaidRollback not implemented")
}
func (UnimplementedOrderRpcServer) CreateOrderRollback(context.Context, *CreateOrderRequest) (*CreateOrderRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderRollback not implemented")
}
func (UnimplementedOrderRpcServer) mustEmbedUnimplementedOrderRpcServer() {}

// UnsafeOrderRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderRpcServer will
// result in compilation errors.
type UnsafeOrderRpcServer interface {
	mustEmbedUnimplementedOrderRpcServer()
}

func RegisterOrderRpcServer(s grpc.ServiceRegistrar, srv OrderRpcServer) {
	s.RegisterService(&OrderRpc_ServiceDesc, srv)
}

func _OrderRpc_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRpcServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderRpc/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRpcServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRpc_GetOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRpcServer).GetOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderRpc/GetOrderDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRpcServer).GetOrderDetail(ctx, req.(*GetOrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRpc_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRpcServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderRpc/GetOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRpcServer).GetOrderList(ctx, req.(*GetOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRpc_GetPaidOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRpcServer).GetPaidOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderRpc/GetPaidOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRpcServer).GetPaidOrderList(ctx, req.(*GetOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRpc_GetSoldSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoldSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRpcServer).GetSoldSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderRpc/GetSoldSeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRpcServer).GetSoldSeats(ctx, req.(*GetSoldSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRpc_SetOrderPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderPaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRpcServer).SetOrderPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderRpc/SetOrderPaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRpcServer).SetOrderPaid(ctx, req.(*SetOrderPaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRpc_SetOrderPaidRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderPaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRpcServer).SetOrderPaidRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderRpc/SetOrderPaidRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRpcServer).SetOrderPaidRollback(ctx, req.(*SetOrderPaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderRpc_CreateOrderRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderRpcServer).CreateOrderRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.orderRpc/CreateOrderRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderRpcServer).CreateOrderRollback(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderRpc_ServiceDesc is the grpc.ServiceDesc for OrderRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.orderRpc",
	HandlerType: (*OrderRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderRpc_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderDetail",
			Handler:    _OrderRpc_GetOrderDetail_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _OrderRpc_GetOrderList_Handler,
		},
		{
			MethodName: "GetPaidOrderList",
			Handler:    _OrderRpc_GetPaidOrderList_Handler,
		},
		{
			MethodName: "GetSoldSeats",
			Handler:    _OrderRpc_GetSoldSeats_Handler,
		},
		{
			MethodName: "SetOrderPaid",
			Handler:    _OrderRpc_SetOrderPaid_Handler,
		},
		{
			MethodName: "SetOrderPaidRollback",
			Handler:    _OrderRpc_SetOrderPaidRollback_Handler,
		},
		{
			MethodName: "CreateOrderRollback",
			Handler:    _OrderRpc_CreateOrderRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

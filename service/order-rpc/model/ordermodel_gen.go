// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`uuid`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheOrderUuidPrefix = "cache:order:uuid:"
)

type (
	orderModel interface {
		Insert(ctx context.Context, data *Order) (sql.Result, error)
		FindOne(ctx context.Context, uuid string) (*Order, error)
		Update(ctx context.Context, data *Order) error
		Delete(ctx context.Context, uuid string) error
	}

	defaultOrderModel struct {
		sqlc.CachedConn
		table string
	}

	Order struct {
		Uuid          string    `db:"uuid"`           // 主键编号
		CinemaId      int64     `db:"cinema_id"`      // 影院编号
		ShowId        int64     `db:"show_id"`        // 放映场次编号
		FilmId        int64     `db:"film_id"`        // 电影编号
		SeatsIds      string    `db:"seats_ids"`      // 已售座位编号
		SeatsPosition string    `db:"seats_position"` // 已售座位位置，例如：1/2表示1排2列，多个座位用","隔开
		Price         float64   `db:"price"`          // 订单总金额
		OrderTime     time.Time `db:"order_time"`     // 下单时间
		UserId        int64     `db:"user_id"`        // 下单人
		Status        int64     `db:"status"`         // 0-待支付,1-已支付,2-已关闭
	}
)

func newOrderModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOrderModel {
	return &defaultOrderModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`order`",
	}
}

func (m *defaultOrderModel) Delete(ctx context.Context, uuid string) error {
	orderUuidKey := fmt.Sprintf("%s%v", cacheOrderUuidPrefix, uuid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `uuid` = ?", m.table)
		return conn.ExecCtx(ctx, query, uuid)
	}, orderUuidKey)
	return err
}

func (m *defaultOrderModel) FindOne(ctx context.Context, uuid string) (*Order, error) {
	orderUuidKey := fmt.Sprintf("%s%v", cacheOrderUuidPrefix, uuid)
	var resp Order
	err := m.QueryRowCtx(ctx, &resp, orderUuidKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", orderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uuid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, data *Order) (sql.Result, error) {
	orderUuidKey := fmt.Sprintf("%s%v", cacheOrderUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.CinemaId, data.ShowId, data.FilmId, data.SeatsIds, data.SeatsPosition, data.Price, data.OrderTime, data.UserId, data.Status)
	}, orderUuidKey)
	return ret, err
}

func (m *defaultOrderModel) Update(ctx context.Context, data *Order) error {
	orderUuidKey := fmt.Sprintf("%s%v", cacheOrderUuidPrefix, data.Uuid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `uuid` = ?", m.table, orderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CinemaId, data.ShowId, data.FilmId, data.SeatsIds, data.SeatsPosition, data.Price, data.OrderTime, data.UserId, data.Status, data.Uuid)
	}, orderUuidKey)
	return err
}

func (m *defaultOrderModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheOrderUuidPrefix, primary)
}

func (m *defaultOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", orderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderModel) tableName() string {
	return m.table
}

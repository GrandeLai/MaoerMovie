// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cinemaFilmFieldNames          = builder.RawFieldNames(&CinemaFilm{})
	cinemaFilmRows                = strings.Join(cinemaFilmFieldNames, ",")
	cinemaFilmRowsExpectAutoSet   = strings.Join(stringx.Remove(cinemaFilmFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	cinemaFilmRowsWithPlaceHolder = strings.Join(stringx.Remove(cinemaFilmFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cacheCinemaFilmIdPrefix = "cache:cinemaFilm:id:"
)

type (
	cinemaFilmModel interface {
		Insert(ctx context.Context, data *CinemaFilm) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CinemaFilm, error)
		Update(ctx context.Context, data *CinemaFilm) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCinemaFilmModel struct {
		sqlc.CachedConn
		table string
	}

	CinemaFilm struct {
		Id       int64 `db:"id"`        // 主键编号
		FilmId   int64 `db:"film_id"`   // 电影编号
		CinemaId int64 `db:"cinema_id"` // 电影院编号
	}
)

func newCinemaFilmModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCinemaFilmModel {
	return &defaultCinemaFilmModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`cinema_film`",
	}
}

func (m *defaultCinemaFilmModel) Delete(ctx context.Context, id int64) error {
	cinemaFilmIdKey := fmt.Sprintf("%s%v", cacheCinemaFilmIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cinemaFilmIdKey)
	return err
}

func (m *defaultCinemaFilmModel) FindOne(ctx context.Context, id int64) (*CinemaFilm, error) {
	cinemaFilmIdKey := fmt.Sprintf("%s%v", cacheCinemaFilmIdPrefix, id)
	var resp CinemaFilm
	err := m.QueryRowCtx(ctx, &resp, cinemaFilmIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cinemaFilmRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCinemaFilmModel) Insert(ctx context.Context, data *CinemaFilm) (sql.Result, error) {
	cinemaFilmIdKey := fmt.Sprintf("%s%v", cacheCinemaFilmIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, cinemaFilmRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FilmId, data.CinemaId)
	}, cinemaFilmIdKey)
	return ret, err
}

func (m *defaultCinemaFilmModel) Update(ctx context.Context, data *CinemaFilm) error {
	cinemaFilmIdKey := fmt.Sprintf("%s%v", cacheCinemaFilmIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cinemaFilmRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FilmId, data.CinemaId, data.Id)
	}, cinemaFilmIdKey)
	return err
}

func (m *defaultCinemaFilmModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCinemaFilmIdPrefix, primary)
}

func (m *defaultCinemaFilmModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cinemaFilmRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCinemaFilmModel) tableName() string {
	return m.table
}

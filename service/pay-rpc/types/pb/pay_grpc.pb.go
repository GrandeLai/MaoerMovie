// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: pay.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayRpcClient is the client API for PayRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayRpcClient interface {
	CreatePay(ctx context.Context, in *CreatePayRequest, opts ...grpc.CallOption) (*CreatePayResponse, error)
	SetPayPaid(ctx context.Context, in *SetPayStatusRequest, opts ...grpc.CallOption) (*SetPayStatusResponse, error)
	SetPayPaidRollback(ctx context.Context, in *SetPayStatusRequest, opts ...grpc.CallOption) (*SetPayStatusResponse, error)
	GetPayDetail(ctx context.Context, in *GetPayDetailRequest, opts ...grpc.CallOption) (*GetPayDetailResponse, error)
}

type payRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPayRpcClient(cc grpc.ClientConnInterface) PayRpcClient {
	return &payRpcClient{cc}
}

func (c *payRpcClient) CreatePay(ctx context.Context, in *CreatePayRequest, opts ...grpc.CallOption) (*CreatePayResponse, error) {
	out := new(CreatePayResponse)
	err := c.cc.Invoke(ctx, "/pay.payRpc/CreatePay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRpcClient) SetPayPaid(ctx context.Context, in *SetPayStatusRequest, opts ...grpc.CallOption) (*SetPayStatusResponse, error) {
	out := new(SetPayStatusResponse)
	err := c.cc.Invoke(ctx, "/pay.payRpc/SetPayPaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRpcClient) SetPayPaidRollback(ctx context.Context, in *SetPayStatusRequest, opts ...grpc.CallOption) (*SetPayStatusResponse, error) {
	out := new(SetPayStatusResponse)
	err := c.cc.Invoke(ctx, "/pay.payRpc/SetPayPaidRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRpcClient) GetPayDetail(ctx context.Context, in *GetPayDetailRequest, opts ...grpc.CallOption) (*GetPayDetailResponse, error) {
	out := new(GetPayDetailResponse)
	err := c.cc.Invoke(ctx, "/pay.payRpc/GetPayDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayRpcServer is the server API for PayRpc service.
// All implementations must embed UnimplementedPayRpcServer
// for forward compatibility
type PayRpcServer interface {
	CreatePay(context.Context, *CreatePayRequest) (*CreatePayResponse, error)
	SetPayPaid(context.Context, *SetPayStatusRequest) (*SetPayStatusResponse, error)
	SetPayPaidRollback(context.Context, *SetPayStatusRequest) (*SetPayStatusResponse, error)
	GetPayDetail(context.Context, *GetPayDetailRequest) (*GetPayDetailResponse, error)
	mustEmbedUnimplementedPayRpcServer()
}

// UnimplementedPayRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPayRpcServer struct {
}

func (UnimplementedPayRpcServer) CreatePay(context.Context, *CreatePayRequest) (*CreatePayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePay not implemented")
}
func (UnimplementedPayRpcServer) SetPayPaid(context.Context, *SetPayStatusRequest) (*SetPayStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayPaid not implemented")
}
func (UnimplementedPayRpcServer) SetPayPaidRollback(context.Context, *SetPayStatusRequest) (*SetPayStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayPaidRollback not implemented")
}
func (UnimplementedPayRpcServer) GetPayDetail(context.Context, *GetPayDetailRequest) (*GetPayDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayDetail not implemented")
}
func (UnimplementedPayRpcServer) mustEmbedUnimplementedPayRpcServer() {}

// UnsafePayRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayRpcServer will
// result in compilation errors.
type UnsafePayRpcServer interface {
	mustEmbedUnimplementedPayRpcServer()
}

func RegisterPayRpcServer(s grpc.ServiceRegistrar, srv PayRpcServer) {
	s.RegisterService(&PayRpc_ServiceDesc, srv)
}

func _PayRpc_CreatePay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRpcServer).CreatePay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.payRpc/CreatePay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRpcServer).CreatePay(ctx, req.(*CreatePayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRpc_SetPayPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRpcServer).SetPayPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.payRpc/SetPayPaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRpcServer).SetPayPaid(ctx, req.(*SetPayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRpc_SetPayPaidRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRpcServer).SetPayPaidRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.payRpc/SetPayPaidRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRpcServer).SetPayPaidRollback(ctx, req.(*SetPayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRpc_GetPayDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRpcServer).GetPayDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.payRpc/GetPayDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRpcServer).GetPayDetail(ctx, req.(*GetPayDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayRpc_ServiceDesc is the grpc.ServiceDesc for PayRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pay.payRpc",
	HandlerType: (*PayRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePay",
			Handler:    _PayRpc_CreatePay_Handler,
		},
		{
			MethodName: "SetPayPaid",
			Handler:    _PayRpc_SetPayPaid_Handler,
		},
		{
			MethodName: "SetPayPaidRollback",
			Handler:    _PayRpc_SetPayPaidRollback_Handler,
		},
		{
			MethodName: "GetPayDetail",
			Handler:    _PayRpc_GetPayDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
